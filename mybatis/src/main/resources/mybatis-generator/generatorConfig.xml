<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	 <!-- 数据库驱动 -->
	<classPathEntry
		location="D:\.m2\repository\mysql\mysql-connector-java\5.0.5\mysql-connector-java-5.0.5.jar" />
	
	<!-- 
		context:生成一组对象的环境 id:必选，上下文id，用于在生成错误时提示 
		defaultModelType:指定生成对象的样式 
			1，conditional：类似hierarchical； 
			2，flat：所有内容（主键，blob）等全部生成在一个对象中； 
			3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class) 
		targetRuntime: 
			1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample； 
			2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample； introspectedColumnImpl：类全限定名，用于扩展MBG -->
	<context id="mysql" defaultModelType="hierarchical" targetRuntime="MyBatis3Simple">
		<commentGenerator>
			<property name="suppressDate" value="false" />
			<property name="suppressAllComments" value="true" />
		</commentGenerator>

		<jdbcConnection driverClass="com.mysql.jdbc.Driver"
			connectionURL="jdbc:mysql://localhost:3306/hhyz?characterEncoding=UTF-8" userId="root" password="123456" />

		<!-- java模型创建器，是必须要的元素 
			负责：1，key类（见context的defaultModelType）；2，java类；3，查询类 
			targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制； 
			targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录 
		-->
		<javaModelGenerator targetPackage="com.hhyz.entity"
			targetProject="src/main/java">
			<!-- for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； -->
			<property name="constructorBased" value="false" />
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<property name="enableSubPackages" value="true" />
			<!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
			<property name="trimStrings" value="true" />
		</javaModelGenerator>

		<!-- 生成SQL map的XML文件生成器， 注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口）， 
			或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置 
			targetPackage/targetProject:同javaModelGenerator 
		-->
		<sqlMapGenerator targetPackage="com.hhyz.entity.xml"
			targetProject="src/main/java">
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>

		<!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 
			targetPackage/targetProject:同javaModelGenerator 
			type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）： 
				1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML； 
				2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中； 
				3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML； 
			注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER 
		-->
		<javaClientGenerator targetPackage="com.hhyz.mapper"
			targetProject="src/main/java" type="XMLMAPPER">
			<property name="enableSubPackages" value="true" />
		</javaClientGenerator>

		<!-- tableName和domainObjectName为必选项，分别代表数据库表名和生成的实例类名，其余的可以自定义去选择（一般情况下均为false） -->
		<table tableName="t_user" domainObjectName="User"
			enableCountByExample="false" enableUpdateByExample="false"
			enableDeleteByExample="false" enableSelectByExample="false"
			selectByExampleQueryId="false">
			<!--<columnRenamingRule searchString="^D_" replaceString=""/> -->
		</table>

	</context>
</generatorConfiguration>